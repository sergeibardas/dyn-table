$(document).ready(function(){$(window).bind('scroll',function(){	if (document.body.scrollTop > $('#dyn-table').position().top) {		$('#headers').css('position','fixed').css('top',0);	} else {		$('#headers').removeAttr('style');	}}).bind('popstate',function(event){	HistoryHandler.deserializeURL(location.href);})$('#headers a').on('click',function(){	UrlHolder.sorting.criterion=$(this).attr('val');	var nearestSibling = $(this).prev();		if (UrlHolder.sorting.asc) {			UrlHolder.sorting.asc = false;			Utils.arrowsCleanUp();			nearestSibling.hide();			nearestSibling.prev().show();		} else {			Utils.arrowsCleanUp();			UrlHolder.sorting.asc = true;			nearestSibling.prev().hide();			nearestSibling.show();		}	HistoryHandler.serializeParam(UrlHolder);})$('#activity-filter option').on('click',function(){	UrlHolder.activities=$(this).val();	HistoryHandler.serializeParam(UrlHolder);})$('#paging a').on('click',function(){	Utils.pointSelectedPage($(this));	UrlHolder.paging=$(this).text();	HistoryHandler.serializeParam(UrlHolder);})$('#filter-key').bind('keyup',function(){	UrlHolder.filterKey=$(this).val();	HistoryHandler.serializeParam(UrlHolder);})$('#page-backward').on('click',function(){	if (UrlHolder.paging!=1){		--UrlHolder.paging;		HistoryHandler.serializeParam(UrlHolder);	}})$('#page-forward').on('click',function(){    //5 number is hardcoded for now,it should be calculable in future someth. like: totalNoOfElems/elemsOnPage	if (UrlHolder.paging!=5){		++UrlHolder.paging;		HistoryHandler.serializeParam(UrlHolder);	}})var Utils = {	arrowsCleanUp:function(){		//TODO would be nice to join these 2 selectors		$("span[val='asc']").each(function(){			$(this).hide();		});		$("span[val='desc']").each(function(){			$(this).hide();		});	},	pointSelectedPage:function(elem){		 $('#paging a').each(function(){			$(this).removeClass('page-selected');		 })		elem.addClass('page-selected');	}}//util class for generating stub data for table,using 3-rd party Mustache.js libraryvar Templater = {	template:"<tr><td><a>{{name}}</a></td><td>{{activity}}</td><td><a>{{contactPerson}}</a></td><td>{{income}}</td>"+	"<td>{{sum}}</td><td>{{#deals}} <div class='{{.}} circle'>{{.}}</div>{{/deals}}</td></tr>",	arr:{},	generateStub:function() {	var arr = [];		for (var i = 0; i < 20; i++){			var jsonStub = {			 "name": "Paul"+i,			 "activity":"-",			 "contactPerson":"Mick",			 "income":777+i*10,			 "sum":100000,			 "deals":["y","g","r"]			}			this.arr[i] = jsonStub;			$('#dyn-table').eq(0).append(Mustache.to_html(this.template,jsonStub))		}		return arr;	}}Templater.generateStub();//class,that operates serialization/deserialization against URL changesvar HistoryHandler = {	serializeParam:function(urlHolder){		$.ajax({			url:location.href,			type:"GET",			data:urlHolder,			success:this.setURL(urlHolder)		})	},	setURL:function(obj){		//var isHistory = !!(window.history && history.pushState);		// isHistory param changed to try() catch() block		try {			var url = location.href;			var isParametrizedUrl = url.indexOf('?')!=-1;				if (isParametrizedUrl){					url = url.substr(0,url.indexOf('?'));				}			loc = url + this.urlBuilder(obj);			history.pushState(null, null, loc);		} catch(e){			throw new Error("History is not supported" + e);		}	},		urlBuilder:function(obj){		return '?paging=' + obj.paging + '&sorting=' + obj.sorting.criterion + '&asc=' + obj.sorting.asc + '&activities=' + obj.activities + '&filter-key=' + obj.filterKey;	},	deserializeURL:function(location){		var params = location.substr(location.indexOf('?') + 1,location.length-1);		var t = params.split('&');		return this.array2Obj(t);	},		array2Obj:function(arr){		for (var y = 0;y < arr.length; y++) {		var curElem = arr[y];			if(arr[y].indexOf('paging')!=-1){				this.UrlHolder.paging = this.extractUrlParamVal(curElem);			}else if (arr[y].indexOf('sorting')!=-1) {				this.UrlHolder.sorting = this.extractUrlParamVal(curElem);			}else if (arr[y].indexOf('activities')!=-1) {				this.UrlHolder.activities = this.extractUrlParamVal(curElem);			}else if (arr[y].indexOf('filter-key')!=-1) {				this.UrlHolder.filterKey = this.extractUrlParamVal(curElem);			}		}		return UrlHolder;	},		extractUrlParamVal:function(curElem){		curElem.substr(curElem.indexOf('=')+1,curElem.length-1);	}};var Paging = {	number:0,	itemsOnPage:50};var Sorting = {	criterion:"name",	asc:true};var UrlHolder = {	paging:Paging.number,	activities:"all",	sorting:Sorting,	filterKey:""};})